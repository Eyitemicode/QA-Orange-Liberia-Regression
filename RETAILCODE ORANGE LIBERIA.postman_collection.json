{
	"info": {
		"_postman_id": "263da31c-03b4-41e9-a3bc-b0de912b123f",
		"name": "RETAILCODE ORANGE LIBERIA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15102361",
		"_collection_link": "https://fbistech.postman.co/workspace/QA-AUTOMATION~cd7866fc-511c-4d0e-bfd7-73927b00c3e2/collection/15102361-263da31c-03b4-41e9-a3bc-b0de912b123f?action=share&source=collection_link&creator=15102361"
	},
	"item": [
		{
			"name": "ADMIN",
			"item": [
				{
					"name": "RBAC",
					"item": [
						{
							"name": "Login Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\" : \"eyitemi.abioritsegbemi@fbistech.com\",\n    \"password\" : \"Bernice@1$\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2FA Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"otp\" : \"111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/2fa",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"2fa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Role Added Successfully\");",
											"});",
											"",
											"let bodyData = pm.response.json();",
											"let value = bodyData.data.id;",
											"console.log(value);",
											"pm.environment.set(\"role_id\", value);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"{{$randomFullName}}\",\n    \"permissions\" : [\n        {\"id\" : 1, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 4, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/roles/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"roles",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Role updated Successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\" : 5,\n    \"name\" : \"{{$randomFullName}}\",\n    \"permissions\" : [\n        {\"id\" : 1, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 2, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 3, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 4, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 5, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true}\n    \n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/roles/update",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"roles",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Commission\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/roles",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Single Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Heatmap\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/roles/{{role_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Role Deleted\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/roles/{{role_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"roles",
										"{{role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Audit Trail\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/permissions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User Created\");",
											"});",
											"",
											"let bodyData = pm.response.json();",
											"let value = bodyData.data.id;",
											"console.log(value);",
											"pm.environment.set(\"admin_id\", value);",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \n    \"name\": \"{{$randomFirstName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"role\": 5\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Admins",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Josh Test\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/list",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User Created\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\" : {{admin_id}},\n    \"name\": \"{{$randomFirstName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"msisdn\" : \"{{$randomPhoneNumber}}\",\n    \"role\" : 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/update",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/tier-upgrade-requests?search=&currentTier=1&newTier=2&agentType=CUSTOMER_AGENT",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"tier-upgrade-requests"
									],
									"query": [
										{
											"key": "search",
											"value": ""
										},
										{
											"key": "currentTier",
											"value": "1"
										},
										{
											"key": "newTier",
											"value": "2"
										},
										{
											"key": "agentType",
											"value": "CUSTOMER_AGENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response",
											"let response = pm.response.json();",
											"",
											"// Validate main response fields",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is successful\", function () {",
											"    pm.expect(response.success).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message is 'Admin Activated'\", function () {",
											"    pm.expect(response.message).to.eql(\"Admin Activated\");",
											"});",
											"",
											"// Validate data object",
											"pm.test(\"Admin ID is present and valid\", function () {",
											"    pm.expect(response.data.id).to.eql(23);",
											"});",
											"",
											"pm.test(\"Admin name is correct\", function () {",
											"    pm.expect(response.data.name).to.eql(\"Temi Test\");",
											"});",
											"",
											"pm.test(\"Admin email is correct\", function () {",
											"    pm.expect(response.data.email).to.eql(\"adminchecker1@yopmail.com\");",
											"});",
											"",
											"pm.test(\"Admin status is ACTIVE\", function () {",
											"    pm.expect(response.data.status).to.eql(\"ACTIVE\");",
											"});",
											"",
											"pm.test(\"Role field is not empty\", function () {",
											"    pm.expect(response.data.role).to.not.be.null;",
											"});",
											"",
											"// Validate permissions list",
											"pm.test(\"Permissions list has 5 items\", function () {",
											"    pm.expect(response.data.permissions.length).to.eql(5);",
											"});",
											"",
											"const expectedPermissions = [",
											"    \"Commissions\",",
											"    \"Bundle Management\",",
											"    \"Agent Management\",",
											"    \"Super Agent Management\",",
											"    \"Funding History\"",
											"];",
											"",
											"pm.test(\"All permissions are correct with full access\", function () {",
											"    response.data.permissions.forEach((perm, index) => {",
											"        pm.expect(perm.name).to.eql(expectedPermissions[index]);",
											"        pm.expect(perm.canRead).to.eql(true);",
											"        pm.expect(perm.canEdit).to.eql(true);",
											"        pm.expect(perm.canAdd).to.eql(true);",
											"        pm.expect(perm.canDelete).to.eql(true);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"adminchecker1@yopmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/activate/23",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"activate",
										"23"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an Existing Admin User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Admin Deleted\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/delete/{{admin_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"delete",
										"{{admin_id}}"
									],
									"query": [
										{
											"key": "id",
											"value": "2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Non-existing Admin User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Admin not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/delete/{{admin_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"delete",
										"{{admin_id}}"
									],
									"query": [
										{
											"key": "id",
											"value": "2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"",
											"// --- Basic Response Validation ---",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API call is successful\", function () {",
											"    pm.expect(response.success).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message is 'Admin Deactivated'\", function () {",
											"    pm.expect(response.message).to.eql(\"Admin Deactivated\");",
											"});",
											"",
											"// --- Data Object Validation ---",
											"pm.test(\"Admin ID is 23\", function () {",
											"    pm.expect(response.data.id).to.eql(23);",
											"});",
											"",
											"pm.test(\"Admin name is 'Temi Test'\", function () {",
											"    pm.expect(response.data.name).to.eql(\"Temi Test\");",
											"});",
											"",
											"pm.test(\"Admin email is correct\", function () {",
											"    pm.expect(response.data.email).to.eql(\"adminchecker1@yopmail.com\");",
											"});",
											"",
											"pm.test(\"Admin status is 'DEACTIVATED'\", function () {",
											"    pm.expect(response.data.status).to.eql(\"DEACTIVATED\");",
											"});",
											"",
											"pm.test(\"Role field is not null\", function () {",
											"    pm.expect(response.data.role).to.not.be.null;",
											"});",
											"",
											"// --- Permissions Validation ---",
											"pm.test(\"There are 5 permissions\", function () {",
											"    pm.expect(response.data.permissions.length).to.eql(5);",
											"});",
											"",
											"const expectedPermissions = [",
											"    \"Commissions\",",
											"    \"Bundle Management\",",
											"    \"Agent Management\",",
											"    \"Super Agent Management\",",
											"    \"Funding History\"",
											"];",
											"",
											"pm.test(\"Each permission has full access\", function () {",
											"    response.data.permissions.forEach((perm, i) => {",
											"        pm.expect(perm.name).to.eql(expectedPermissions[i]);",
											"        pm.expect(perm.canRead).to.eql(true);",
											"        pm.expect(perm.canEdit).to.eql(true);",
											"        pm.expect(perm.canAdd).to.eql(true);",
											"        pm.expect(perm.canDelete).to.eql(true);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"adminchecker1@yopmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/admins/deactivate/23",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"admins",
										"deactivate",
										"23"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Agents",
					"item": [
						{
							"name": "Get Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"//Test tha Api Url is correct",
											"pm.test(\"API URL is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.eql(\"http://35.204.215.73/api/v1/agents\");",
											"});",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(\"Data array exists and is not empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Pagination parameters are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.currentPage).to.eql(1);",
											"    pm.expect(jsonData.hasMorePages).to.eql(false);",
											"    pm.expect(jsonData.perPage).to.eql(40);",
											"    // pm.expect(jsonData.total).to.eql(8);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "search",
											"value": "Stan",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2025-01-06",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2025-01-06",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"download"
									],
									"query": [
										{
											"key": "search",
											"value": "stan",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"//Test tha Api Url is correct",
											"pm.test(\"API URL is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.eql(\"http://35.204.215.73/api/v1/agents/customer-agents\");",
											"});",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(\"Data array exists and is not empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Pagination parameters are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.currentPage).to.eql(1);",
											"    pm.expect(jsonData.hasMorePages).to.eql(false);",
											"    pm.expect(jsonData.perPage).to.eql(40);",
											"    // pm.expect(jsonData.total).to.eql(8);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/customer-agents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"customer-agents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Agent By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"// Test for 'message' field",
											"pm.test(\"Message field is correct\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\", \"Agent fetched by id successfully\");",
											"});",
											"",
											"// Test for 'data' object",
											"pm.test(\"Data object is present\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"data\").that.is.an(\"object\");",
											"});",
											"",
											"// Test for Agent details",
											"pm.test(\"Agent details are correct and have proper fields\", function () {",
											"    const data = jsonResponse.data;",
											"",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"email\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletId\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"msisdn\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"status\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"lastLogin\").that.is.null;",
											"    pm.expect(data).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Recharge Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/recharge-logs/download?startDate=2025-01-01&endDate=2025-01-03",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"recharge-logs",
										"download"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-01-01"
										},
										{
											"key": "endDate",
											"value": "2025-01-03"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Agent Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"// Test for 'message' field",
											"pm.test(\"Message field is correct\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\", \"Agent profile  fetched successfully\");",
											"});",
											"",
											"// Test for 'data' object",
											"pm.test(\"Data object is present\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"data\").that.is.an(\"array\");",
											"});",
											"",
											"// Test for Agent details",
											"pm.test(\"'data' array contains valid entries\", function () {",
											"    jsonResponse.data.forEach(item => {",
											"        pm.expect(item.id).to.be.a(\"number\");",
											"        pm.expect(item.sequence).to.be.a(\"string\");",
											"        pm.expect(item.reference).to.be.a(\"string\");",
											"        pm.expect(item.paymentMethod).to.be.a(\"string\");",
											"        pm.expect(item.recipient).to.be.a(\"string\");",
											"        pm.expect(item.currency).to.be.a(\"string\");",
											"   });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/profile",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"profile"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-01-01",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2025-01-07",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Wallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', 'Agent wallet refreshed successfully');",
											"})",
											"",
											"const data = jsonResponse.data;",
											"",
											"pm.test(`The balance in lrd is: '${pm.response.json().data.balance_lrd}', The balance in usd is: '${pm.response.json().data.balance_usd}' `, function(){",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"walletBalanceLRD\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceUSD\").that.is.a(\"string\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/1/wallet",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', \"Agent activated successfully\");",
											"});",
											"",
											"const data = jsonResponse.data;",
											"",
											"pm.test(\"Data properties are valid\", function(){",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"agentCode\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceLRD\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceUSD\").that.is.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/activate",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"activate"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', 'Agent deactivated successfully');",
											"});",
											"",
											"const data = jsonResponse.data;",
											"",
											"pm.test(\"Data properties are valid\", function(){",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"agentCode\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceLRD\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceUSD\").that.is.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/deactivate",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"deactivate"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Commissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', 'Commissions');",
											"})",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/commissions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"commissions"
									],
									"variable": [
										{
											"key": "id",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Super Agents",
					"item": [
						{
							"name": "Get Super Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"//Test tha Api Url is correct",
											"pm.test(\"API URL is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.eql(\"http://35.204.215.73/api/v1/super-agents\");",
											"});",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(\"Message field is correct\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\", \"Super Agent fetched successfully\");",
											"});",
											"",
											"pm.test(\"Data array exists and is not empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Pagination parameters are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.currentPage).to.eql(1);",
											"    pm.expect(jsonData.hasMorePages).to.eql(false);",
											"    pm.expect(jsonData.perPage).to.eql(40);",
											"    // pm.expect(jsonData.total).to.eql(8);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents"
									],
									"query": [
										{
											"key": "search",
											"value": "New",
											"disabled": true
										},
										{
											"key": "status",
											"value": "inactive",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Super Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Super Agent By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"// Test for 'message' field",
											"pm.test(\"Message field is correct\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\", \"Super Agent fetched by id successfully\");",
											"});",
											"",
											"// Test for 'data' object",
											"pm.test(\"Data object is present\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"data\").that.is.an(\"object\");",
											"});",
											"",
											"// Test for Agent details",
											"pm.test(\"Agent details are correct and have proper fields\", function () {",
											"    const data = jsonResponse.data;",
											"",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"email\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletId\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"msisdn\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"status\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"lastLogin\").that.is.null;",
											"    pm.expect(data).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents/4",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Super Agent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomNumber = _.random(1000000,9999999)",
											"pm.variables.set('randomNumber', randomNumber )",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let bodyData = pm.response.json();",
											"let value = bodyData.data.id;",
											"console.log(value);",
											"",
											"pm.environment.set(\"superagent_id\", value);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response",
											"let response = pm.response.json();",
											"",
											"// Validate top-level keys",
											"pm.test(\"Response should be successful\", function () {",
											"    pm.expect(response.success).to.eql(true);",
											"    pm.expect(response.message).to.eql(\"Super agent created successfully\");",
											"});",
											"",
											"// Validate 'data' object keys",
											"pm.test(\"Super agent data should contain expected fields\", function () {",
											"    const data = response.data;",
											"    ",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"email\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletId\").that.matches(/^234\\d{10}$/);",
											"    pm.expect(data).to.have.property(\"msisdn\").that.equals(data.walletId);",
											"    pm.expect(data).to.have.property(\"region\").that.includes(\"Liberia\");",
											"    pm.expect(data).to.have.property(\"status\").that.equals(\"ACTIVE\");",
											"    pm.expect(data).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"    ",
											"    ",
											"    pm.expect(data.lastLogin).to.eql(null);",
											"",
											"    pm.expect(data.frontendCommissionEarnedUSD).to.eql(0);",
											"    pm.expect(data.frontendCommissionEarnedLRD).to.eql(0);",
											"    pm.expect(data.backendCommissionEarnedUSD).to.eql(0);",
											"    pm.expect(data.backendCommissionEarnedLRD).to.eql(0);",
											"});",
											"",
											"pm.environment.set(\"super_agent_id\", response.data.id);",
											"pm.environment.set(\"super_agent_walletId\", response.data.walletId);",
											"pm.environment.set(\"super_agent_email\", response.data.email);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomFullName}}\", \n    \"msisdn\": \"0913{{randomNumber}}\", \n    \"wallet_id\": \"0913{{randomNumber}}\", \n    \"email\" : \"{{$randomEmail}}\",\n    \"region\" : 1,\n    \"authorization\" : \"111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Super Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"// Test for 'message' field",
											"pm.test(\"Message field is correct\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\", \"Super agent updated successfully\");",
											"});",
											"",
											"// Test for 'data' object",
											"pm.test(\"Data object is present\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"data\").that.is.an(\"object\");",
											"});",
											"",
											"// Test for Agent details",
											"pm.test(\"Agent details are correct and have proper fields\", function () {",
											"    const data = jsonResponse.data;",
											"",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"email\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletId\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"msisdn\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"status\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"lastLogin\").that.is.null;",
											"    pm.expect(data).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomNumber = _.random(1000000,9999999)",
											"pm.variables.set('randomNumber', randomNumber )",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Noel Feest\", \n    \"msisdn\": \"0913{{randomNumber}}\", \n    \"wallet_id\": \"0913{{randomNumber}}\", \n    \"email\" : \"{{$randomEmail}}\",\n    \"region\" : 2,\n    \"authorization\" : \"111111\" \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents/{{superagent_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents",
										"{{superagent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Super Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorization\" : \"111111\" \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents/activate{{superagent_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents",
										"activate{{superagent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate Super Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents/deactivate/{{superagent_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents",
										"deactivate",
										"{{superagent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Del Super Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Super Agent deleted successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-agents/{{superagent_id}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-agents",
										"{{superagent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Agents Copy",
					"item": [
						{
							"name": "Get Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(\"Data array exists and is not empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Pagination parameters are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.currentPage).to.eql(1);",
											"    pm.expect(jsonData.hasMorePages).to.eql(false);",
											"    pm.expect(jsonData.perPage).to.eql(40);",
											"    // pm.expect(jsonData.total).to.eql(8);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents"
									],
									"query": [
										{
											"key": "search",
											"value": "Stan",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2025-01-06",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2025-01-06",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"download"
									],
									"query": [
										{
											"key": "search",
											"value": "stan",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(\"Data array exists and is not empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Pagination parameters are correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.currentPage).to.eql(1);",
											"    pm.expect(jsonData.hasMorePages).to.eql(false);",
											"    pm.expect(jsonData.perPage).to.eql(40);",
											"    // pm.expect(jsonData.total).to.eql(8);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/customer-agents",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										"customer-agents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Agent By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"// Test for 'message' field",
											"pm.test(\"Message field is correct\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\", \"Agent fetched by id successfully\");",
											"});",
											"",
											"// Test for 'data' object",
											"pm.test(\"Data object is present\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"data\").that.is.an(\"object\");",
											"});",
											"",
											"// Test for Agent details",
											"pm.test(\"Agent details are correct and have proper fields\", function () {",
											"    const data = jsonResponse.data;",
											"",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"email\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletId\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"msisdn\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"status\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"lastLogin\").that.is.null;",
											"    pm.expect(data).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Recharge Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/recharge-logs/download?startDate=2025-01-01&endDate=2025-01-03",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"recharge-logs",
										"download"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-01-01"
										},
										{
											"key": "endDate",
											"value": "2025-01-03"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Agent Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for 'success' field",
											"pm.test(\"Success field is true\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"// Test for 'message' field",
											"pm.test(\"Message field is correct\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"message\", \"Agent profile  fetched successfully\");",
											"});",
											"",
											"// Test for 'data' object",
											"pm.test(\"Data object is present\", function () {",
											"    pm.expect(jsonResponse).to.have.property(\"data\").that.is.an(\"array\");",
											"});",
											"",
											"// Test for Agent details",
											"pm.test(\"'data' array contains valid entries\", function () {",
											"    jsonResponse.data.forEach(item => {",
											"        pm.expect(item.id).to.be.a(\"number\");",
											"        pm.expect(item.sequence).to.be.a(\"string\");",
											"        pm.expect(item.reference).to.be.a(\"string\");",
											"        pm.expect(item.paymentMethod).to.be.a(\"string\");",
											"        pm.expect(item.recipient).to.be.a(\"string\");",
											"        pm.expect(item.currency).to.be.a(\"string\");",
											"   });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/profile",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"profile"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-01-01",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2025-01-07",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh Wallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', 'Agent wallet refreshed successfully');",
											"})",
											"",
											"const data = jsonResponse.data;",
											"",
											"pm.test(`The balance in lrd is: '${pm.response.json().data.balance_lrd}', The balance in usd is: '${pm.response.json().data.balance_usd}' `, function(){",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"balance_lrd\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"balance_usd\").that.is.a(\"string\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/wallet",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"wallet"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', \"Agent activated successfully\");",
											"});",
											"",
											"const data = jsonResponse.data;",
											"",
											"pm.test(\"Data properties are valid\", function(){",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"agentCode\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceLRD\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceUSD\").that.is.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/activate",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"activate"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', 'Agent deactivated successfully');",
											"});",
											"",
											"const data = jsonResponse.data;",
											"",
											"pm.test(\"Data properties are valid\", function(){",
											"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"agentCode\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceLRD\").that.is.a(\"string\");",
											"    pm.expect(data).to.have.property(\"walletBalanceUSD\").that.is.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/deactivate",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"deactivate"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Commissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"",
											"pm.test(\"Response status is 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`Success is '${pm.response.json().success}'`,function(){",
											"    pm.expect(jsonResponse).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(`Message is '${pm.response.json().message}'`, function(){",
											"    pm.expect(jsonResponse).to.have.property('message', 'Commissions');",
											"})",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/agents/:id/commissions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"agents",
										":id",
										"commissions"
									],
									"variable": [
										{
											"key": "id",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Audit Trail",
					"item": [
						{
							"name": "Get Audit Trails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate the response structure",
											"pm.test(\"Response structure is valid\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Check top-level properties",
											"    pm.expect(jsonData).to.have.property(\"success\", true);",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Audit Trails\");",
											"    pm.expect(jsonData.url).to.eql(\"http://35.204.215.73/api/v1/audit-trails\");",
											"    pm.expect(jsonData).to.have.property(\"currentPage\");",
											"    pm.expect(jsonData).to.have.property(\"hasMorePages\");",
											"    pm.expect(jsonData).to.have.property(\"lastPage\");",
											"    pm.expect(jsonData).to.have.property(\"nextPageUrl\");",
											"    pm.expect(jsonData).to.have.property(\"perPage\");",
											"    pm.expect(jsonData).to.have.property(\"previousPageUrl\");",
											"    pm.expect(jsonData).to.have.property(\"total\");",
											"    pm.expect(jsonData).to.have.property(\"url\");",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
											"});",
											"",
											"// Validate pagination details",
											"pm.test(\"Pagination details are correct\", () => {",
											"    const jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.currentPage).to.be.a(\"number\");",
											"    pm.expect(jsonData.hasMorePages).to.be.a(\"boolean\");",
											"    pm.expect(jsonData.lastPage).to.be.a(\"number\");",
											"    pm.expect(jsonData.nextPageUrl).to.be.a(\"string\");",
											"    pm.expect(jsonData.perPage).to.be.a(\"number\");",
											"    pm.expect(jsonData.total).to.be.a(\"number\");",
											"});",
											"",
											"// Validate data array contents",
											"pm.test(\"Data array structure is valid\", () => {",
											"    const jsonData = pm.response.json();",
											"    const data = jsonData.data;",
											"",
											"    data.forEach(item => {",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");",
											"        pm.expect(item).to.have.property(\"user\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"email\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"msisdn\").that.satisfies(msisdn => msisdn === null || typeof msisdn === \"string\");",
											"        pm.expect(item).to.have.property(\"event\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"action\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"details\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"ipAddress\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"userAgent\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"    });",
											"});",
											"",
											"// Parse response JSON",
											"const jsonResponse = pm.response.json();",
											"",
											"// Test for overall response status",
											"pm.test(\"Response status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/audit-trails",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"audit-trails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Audit Trail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/audit-trails/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"audit-trails",
										"download"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tier Upgrade Requests",
					"item": [
						{
							"name": "Approve Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestId\" : 1,\n    \"password\" : \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/tier-upgrade-requests/approve",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"tier-upgrade-requests",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Requests Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/tier-upgrade-requests?search=&currentTier=1&newTier=2&agentType=CUSTOMER_AGENT",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"tier-upgrade-requests"
									],
									"query": [
										{
											"key": "search",
											"value": ""
										},
										{
											"key": "currentTier",
											"value": "1"
										},
										{
											"key": "newTier",
											"value": "2"
										},
										{
											"key": "agentType",
											"value": "CUSTOMER_AGENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Decline Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requestId\" : 2,\n    \"reason\" : \"Cause i can so i have\",\n    \"password\" : \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/tier-upgrade-requests/decline",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"tier-upgrade-requests",
										"decline"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Bundles",
					"item": [
						{
							"name": "Get Bundles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Bundles List\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/bundles?page=2",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"bundles"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Refetch Bundles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Bundles List Refetched\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/bundles/refetch",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"bundles",
										"refetch"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Funding History",
					"item": [
						{
							"name": "Get Funding History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Funding History\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/fundings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"fundings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Commissions",
					"item": [
						{
							"name": "Get All Commissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Commissions fetched successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/commissions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"commissions"
									],
									"query": [
										{
											"key": "search",
											"value": "alabo",
											"disabled": true
										},
										{
											"key": "type",
											"value": "INSTANT",
											"disabled": true
										},
										{
											"key": "status",
											"value": "PENDING",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "LRD",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "USD Pending Backend Commissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Commissions fetched successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/commissions?search=alabo&type=BACKEND&status=PENDING&currency=USD",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"commissions"
									],
									"query": [
										{
											"key": "search",
											"value": "alabo"
										},
										{
											"key": "type",
											"value": "BACKEND"
										},
										{
											"key": "status",
											"value": "PENDING"
										},
										{
											"key": "currency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LRD Pending Backend Commissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"true\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/commissions?search=alabo&type=BACKEND&status=PENDING&currency=LRD",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"commissions"
									],
									"query": [
										{
											"key": "search",
											"value": "alabo"
										},
										{
											"key": "type",
											"value": "BACKEND"
										},
										{
											"key": "status",
											"value": "PENDING"
										},
										{
											"key": "currency",
											"value": "LRD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payout Commission",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\" : 37,\n    \"authorization\" : \"111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/commissions/payout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"commissions",
										"payout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Recharge Logs",
					"item": [
						{
							"name": "Get Recharge Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Recharge logs fetched successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/recharge-logs?search=000000000004&paymentMethod=CASH&status=FAILED",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"recharge-logs"
									],
									"query": [
										{
											"key": "search",
											"value": "000000000004"
										},
										{
											"key": "paymentMethod",
											"value": "CASH"
										},
										{
											"key": "status",
											"value": "FAILED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Recharge Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/recharge-logs/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"recharge-logs",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email Recharge Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/recharge-logs/mail?email=odilistanislaus@gmail.com",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"recharge-logs",
										"mail"
									],
									"query": [
										{
											"key": "email",
											"value": "odilistanislaus@gmail.com"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dashboard",
					"item": [
						{
							"name": "Sales Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Sales Overview\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/dashboard/sales-overview",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"sales-overview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sales Breakdown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Sales Breakdown\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/dashboard/sales-breakdown?filter=weekly&currency=LRD",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"sales-breakdown"
									],
									"query": [
										{
											"key": "filter",
											"value": "weekly",
											"description": "daily,weekly and monthly"
										},
										{
											"key": "currency",
											"value": "LRD",
											"description": "LRD,USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Top Agents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Top Agents\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/dashboard/top-agents?currency=LRD",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"top-agents"
									],
									"query": [
										{
											"key": "currency",
											"value": "LRD"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}